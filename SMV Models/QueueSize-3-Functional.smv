MODULE main
VAR state : {s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14};
inp : {ofer0, ofer1, pol, size};
out : {true, nul, 0, 1, 2, ful, 3, null, Queue, 5, 7, 9, 11, 12, 14};
ASSIGN
init(state) := s0;
next(state) := case
state = s0 & inp = ofer0: s1;
state = s0 & inp = ofer1: s2;
state = s0 & inp = pol: s0;
state = s0 & inp = size: s0;
state = s1 & inp = ofer0: s3;
state = s1 & inp = ofer1: s7;
state = s1 & inp = pol: s0;
state = s1 & inp = size: s1;
state = s2 & inp = ofer0: s4;
state = s2 & inp = ofer1: s8;
state = s2 & inp = pol: s0;
state = s2 & inp = size: s2;
state = s3 & inp = ofer0: s5;
state = s3 & inp = ofer1: s12;
state = s3 & inp = pol: s1;
state = s3 & inp = size: s3;
state = s4 & inp = ofer0: s6;
state = s4 & inp = ofer1: s13;
state = s4 & inp = pol: s1;
state = s4 & inp = size: s4;
state = s5 & inp = ofer0: s5;
state = s5 & inp = ofer1: s5;
state = s5 & inp = pol: s3;
state = s5 & inp = size: s5;
state = s6 & inp = ofer0: s6;
state = s6 & inp = ofer1: s6;
state = s6 & inp = pol: s3;
state = s6 & inp = size: s6;
state = s7 & inp = ofer0: s9;
state = s7 & inp = ofer1: s14;
state = s7 & inp = pol: s2;
state = s7 & inp = size: s7;
state = s8 & inp = ofer0: s10;
state = s8 & inp = ofer1: s11;
state = s8 & inp = pol: s2;
state = s8 & inp = size: s8;
state = s9 & inp = ofer0: s9;
state = s9 & inp = ofer1: s9;
state = s9 & inp = pol: s4;
state = s9 & inp = size: s9;
state = s10 & inp = ofer0: s10;
state = s10 & inp = ofer1: s10;
state = s10 & inp = pol: s4;
state = s10 & inp = size: s10;
state = s11 & inp = ofer0: s11;
state = s11 & inp = ofer1: s11;
state = s11 & inp = pol: s8;
state = s11 & inp = size: s11;
state = s12 & inp = ofer0: s12;
state = s12 & inp = ofer1: s12;
state = s12 & inp = pol: s7;
state = s12 & inp = size: s12;
state = s13 & inp = ofer0: s13;
state = s13 & inp = ofer1: s13;
state = s13 & inp = pol: s7;
state = s13 & inp = size: s13;
state = s14 & inp = ofer0: s14;
state = s14 & inp = ofer1: s14;
state = s14 & inp = pol: s8;
state = s14 & inp = size: s14;
esac;
out := case
state = s0 & inp = ofer0: true;
state = s0 & inp = ofer1: true;
state = s0 & inp = pol: nul;
state = s0 & inp = size: 0;
state = s1 & inp = ofer0: true;
state = s1 & inp = ofer1: true;
state = s1 & inp = pol: 0;
state = s1 & inp = size: 1;
state = s2 & inp = ofer0: true;
state = s2 & inp = ofer1: true;
state = s2 & inp = pol: 1;
state = s2 & inp = size: 1;
state = s3 & inp = ofer0: true;
state = s3 & inp = ofer1: true;
state = s3 & inp = pol: 0;
state = s3 & inp = size: 2;
state = s4 & inp = ofer0: true;
state = s4 & inp = ofer1: true;
state = s4 & inp = pol: 1;
state = s4 & inp = size: 2;
state = s5 & inp = ofer0: ful;
state = s5 & inp = ofer1: ful;
state = s5 & inp = pol: 0;
state = s5 & inp = size: 3;
state = s6 & inp = ofer0: ful;
state = s6 & inp = ofer1: ful;
state = s6 & inp = pol: 1;
state = s6 & inp = size: 3;
state = s7 & inp = ofer0: true;
state = s7 & inp = ofer1: true;
state = s7 & inp = pol: 0;
state = s7 & inp = size: 2;
state = s8 & inp = ofer0: true;
state = s8 & inp = ofer1: true;
state = s8 & inp = pol: 1;
state = s8 & inp = size: 2;
state = s9 & inp = ofer0: ful;
state = s9 & inp = ofer1: ful;
state = s9 & inp = pol: 0;
state = s9 & inp = size: 3;
state = s10 & inp = ofer0: ful;
state = s10 & inp = ofer1: ful;
state = s10 & inp = pol: 1;
state = s10 & inp = size: 3;
state = s11 & inp = ofer0: ful;
state = s11 & inp = ofer1: ful;
state = s11 & inp = pol: 1;
state = s11 & inp = size: 3;
state = s12 & inp = ofer0: ful;
state = s12 & inp = ofer1: ful;
state = s12 & inp = pol: 0;
state = s12 & inp = size: 3;
state = s13 & inp = ofer0: ful;
state = s13 & inp = ofer1: ful;
state = s13 & inp = pol: 1;
state = s13 & inp = size: 3;
state = s14 & inp = ofer0: ful;
state = s14 & inp = ofer1: ful;
state = s14 & inp = pol: 0;
state = s14 & inp = size: 3;
esac;
DEFINE Queue-Fixed-Size:= 3;
DEFINE EmptyQueue:= (inp=size & out=0) | (inp=pol & out=null) | (state=s0 & inp=ofer0 & out=0)| (state=s0 & inp=ofer1 & out=1); 
DEFINE FullQueue:= (inp=ofer0 & out=ful) | (inp=ofer1 & out=ful) | (inp=size & out=Queue-Fixed-Size);
DEFINE Queue-Overflow:= Queue-Fixed-Size+1;
DEFINE Queue-Underflow:= -1;


--In Functional specifications, MUST or SHOULD statements are met.

--P11: Queue should behaves like  'FIFO' manner not like 'LIFO' manner.
	
		--	Approach
		-- (1)((ofer0 -> ofer1 -> ofer2) ...  pol->out=0
		-- (2)((ofer0 -> ofer1 -> ofer2) ...  pol->pol->out=1
		-- (3)((ofer0 -> ofer1 -> ofer2) ...  pol->pol->pol->out=2
		
			--LTLSPEC NAME Fun_0 := (!FullQueue  -> (inp=ofer1 -> X(inp=pol -> out=1)))																								--True
			--LTLSPEC NAME Fun_00 := (!FullQueue -> (inp=ofer0 ->X(!FullQueue & inp=ofer1 ->X(inp=pol -> out=0))))																	--True		
					
			--LTLSPEC NAME Fun_1_1_1_1 := G(!FullQueue -> (inp=ofer0 -> X(inp=pol -> out=0)))																						--???False
			
			
			--LTLSPEC NAME Fun_1_1 := G(!FullQueue & inp!=ofer0 -> (inp=ofer1 & inp!=ofer0 ->X(!FullQueue & inp=ofer0 ->X(inp=pol -> out=1))))										--True	
			
			--LTLSPEC NAME Fun_1_1_1 := G(!FullQueue -> (inp=ofer1 -> X(!FullQueue & inp=ofer0 -> X(inp=pol -> out=1))))															--True				
			--LTLSPEC NAME Fun_1_1_2 := G(!FullQueue ->(inp=ofer0 -> X(!FullQueue & inp=ofer1 -> X(inp=pol -> out=0))))																--True			
			--LTLSPEC NAME Fun_1_2 := G(!FullQueue -> (inp=ofer1 -> X(!FullQueue & inp=ofer0 -> X(inp=pol -> out!=0))))																--True	

	LTLSPEC NAME Fun_1_1_3 := inp=ofer1 -> X(((inp=ofer0 | inp=ofer1) U !FullQueue) -> (inp=pol -> out=1))																	--True		
	LTLSPEC NAME Fun_1_1_4 := inp=ofer0 -> X(((inp=ofer0 | inp=ofer1) U !FullQueue) -> (inp=pol -> out=0))																	--True	
	
			--LTLSPEC NAME Fun_1_1_31 := inp=ofer1 -> (((inp=ofer0 | inp=ofer1) U !FullQueue) -> (inp=pol -> out=1))																--Warning True		
			--LTLSPEC NAME Fun_1_1_41 := inp=ofer0 -> (((inp=ofer0 | inp=ofer1) U !FullQueue) -> (inp=pol -> out=1))																--Warning False

			--LTLSPEC NAME Fun_1_1_5 := inp=ofer1 -> X(((inp=ofer0 | inp=ofer1) U !FullQueue) -> X(inp=pol -> out=1))																--Why???False		
			--LTLSPEC NAME Fun_1_1_6 := inp=ofer1 -> X(((inp=ofer0 | inp=ofer1) U (inp=size & out=3)) -> X(inp=pol -> out=1))														--???False	

			--LTLSPEC NAME Fun_1_1_7 := inp=ofer1 -> X(((inp=ofer0 | inp=ofer1) U FullQueue) -> X(inp=pol -> out=1))																--???True		
			--LTLSPEC NAME Fun_1_1_8 := inp=ofer1 -> X(((inp=ofer0 | inp=ofer1) U FullQueue) -> X(inp=pol -> out=0))																--???True	

			--LTLSPEC NAME Fun_1_1_9 := inp=ofer1 -> X(((inp=ofer0 | inp=ofer1) U FullQueue) -> (inp=pol -> out=1))																	--???True		
			--LTLSPEC NAME Fun_1_1_10 := inp=ofer1 -> X(((inp=ofer0 | inp=ofer1) U FullQueue) -> (inp=pol -> out=0))																--???True				


--P12(a): It should only be 'Empty' at initial state.  Or It should not be 'Empty' everywhere except at initial state.
	 
			LTLSPEC NAME Fun_2_1 := G(state !=s0 -> !EmptyQueue)																													--True
			LTLSPEC NAME Fun_2_2 := G((inp=size & out!=0) -> !EmptyQueue)																											--True		
	 
--P12(b): It should only be 'Filled' at final state. Or It should not be 'Filled' everywhere except at final state.
		
			LTLSPEC NAME Fun_2_3 := G((inp=size & out!=Queue-Fixed-Size) -> !FullQueue)	
			LTLSPEC NAME Fun_2_4 := G((inp=size & out!=Queue-Fixed-Size) -> !FullQueue)
	 
	 
--P13(a): "Insert (offer)" operation increases the Queue-size.
			
			--Pushing
			LTLSPEC NAME Fun_3_1 := G((inp=ofer0|inp=ofer1) -> X(inp=size ->out!=0))
			
			--LTLSPEC NAME Fun_3_2 := G((inp=ofer0|inp=ofer1) -> X(inp=size -> out=1|out=2|out=3))
			
			--CTLSPEC NAME Fun_3_3 := AG((!FullQueue & (inp=ofer0 | inp=ofer1) & inp!=pol) -> AF (out=0 | out=1 | out=ful))														--True		
			--CTLSPEC NAME Fun_3_4 := AG((EmptyQueue & (inp=ofer0 | inp=ofer1) & inp!=pol) -> AF (out=0 | out=1))																--True
		
			--CTLSPEC NAME Fun_3_5 := AG((inp=ofer0 & inp!=pol) -> AF (out=0 | out=ful))																						--True
			--CTLSPEC NAME Fun_3_6 := AG(((inp=ofer0 | inp=ofer1) & inp!=pol) -> AF (out=0 | out=1| out=ful))																	--True			
				
			
			LTLSPEC NAME Fun_3_7 := G((inp=size & out=0) -> X((inp=ofer0 | inp=ofer1) -> X(inp=size -> out=1)))																	--True
			LTLSPEC NAME Fun_3_8 := G((inp=size & out=0) -> X(inp=ofer0 | inp=ofer1 -> X(!FullQueue & inp=ofer0 | inp=ofer1 -> X(inp=size -> out=2))))							--True
			LTLSPEC NAME Fun_3_9 := G((inp=size & out=1) -> X(inp=ofer0 | inp=ofer1 -> X(!FullQueue & inp=ofer0 | inp=ofer1 -> X(inp=size -> out=3))))							--True	
			LTLSPEC NAME Fun_3_9_1 := G((inp=size & out=5) -> X(inp=ofer0 | inp=ofer1 -> X(!FullQueue & inp=ofer0 | inp=ofer1 -> X(inp=size -> out=7))))						--True	
			LTLSPEC NAME Fun_3_9_2 := G((inp=size & out=9) -> X(inp=ofer0 | inp=ofer1 -> X(!FullQueue & inp=ofer0 | inp=ofer1 -> X(inp=size -> out=11))))						--True	
			--LTLSPEC NAME Fun_3_9_3 := G((inp=size & out=12) -> X(inp=ofer0 | inp=ofer1 -> X(!FullQueue & inp=ofer0 | inp=ofer1 -> X(inp=size -> out=14))))						--True	
			--etc

			
--P13(b): â€œRemove (pol)" operation decreases the Queue-size.
			
			--poling			
			LTLSPEC NAME Fun_3_10 := G(inp=pol -> X(inp=size -> out!=Queue-Fixed-Size))																							--True
			--LTLSPEC NAME Fun_3_11 := G(inp=pol -> X(inp=size -> out=0|out=1|out=2))
			
			LTLSPEC NAME Fun_3_12 := G((inp=size & out=Queue-Fixed-Size) -> X(inp=pol -> X(inp=size -> out=(Queue-Fixed-Size)-1)))												--True
			LTLSPEC NAME Fun_3_13 := G((inp=size & out=Queue-Fixed-Size) -> X(inp=pol -> X(inp=pol ->X(inp=size -> out=(Queue-Fixed-Size)-2))))									--True
			LTLSPEC NAME Fun_3_14 := G((FullQueue) -> X(inp=pol -> X(inp=pol ->X(inp=size -> out=(Queue-Fixed-Size)-2))))														--True		
			
		
--P14: "Insert0 (ofer0)" operation must inserts "0" (not 1) on the Queue. And "Insert1 (ofer1)" must inserts "1" (not 0) on the Queue.
							
			--LTLSPEC NAME Fun_4_1 := G(!FullQueue & inp=ofer0 -> X(inp=pol -> out!=1))																							--False
			--LTLSPEC NAME Fun_4_2 := G(!FullQueue & inp=ofer0 -> X(inp=pol -> out=1))																							--False
			
								
			--LTLSPEC NAME Fun_4_3 := G(!FullQueue & inp=ofer1 -> X(inp=pol -> out!=0))																							--False
			--LTLSPEC NAME Fun_4_4 := G(!FullQueue & inp=ofer1 -> X(inp=pol -> out=1))																							--False					
					
			--LTLSPEC NAME Fun_4_5 := G(inp=ofer0 | inp=ofer1 -> out=0|out=ful)																									--True
			
			
			--Same as --P11
			LTLSPEC NAME Fun_4_6 := inp=ofer1 -> X(((inp=ofer0 | inp=ofer1) U !FullQueue) -> (inp=pol -> out=1))																--True		
			LTLSPEC NAME Fun_4_7 := inp=ofer0 -> X(((inp=ofer0 | inp=ofer1) U !FullQueue) -> (inp=pol -> out=0))																--True
				
		
--P15: Queue should not "Overflow" or "Underflow".
				
			LTLSPEC NAME Fun_5_1 := G((!FullQueue & (inp=ofer0 | inp=ofer1)) -> X(inp=size -> out!=Queue-Overflow))																--True
			LTLSPEC NAME Fun_5_2 := G(!EmptyQueue & inp=pol -> X(inp=size -> out!=Queue-Underflow))			   																	--True
				

--P16: If equal number of "offer" operations followed by same number of "poll" operations occur then Queue-size should remain same.
				
			--one push followd by one pol
			LTLSPEC NAME Fun_6_1 := G((inp=size & out=0) -> X(inp=ofer0 -> X(inp=pol -> X(inp=size -> out=0))))																	--True
			LTLSPEC NAME Fun_6_2 := G((inp=size & out=1) -> X(inp=ofer0 -> X(inp=pol -> X(inp=size -> out=1))))																	--True
			LTLSPEC NAME Fun_6_2_1 := G((inp=size & out=5) -> X(inp=ofer0 -> X(inp=pol -> X(inp=size -> out=5))))																--True
			LTLSPEC NAME Fun_6_2_2 := G((inp=size & out=12) -> X(inp=ofer0 -> X(inp=pol -> X(inp=size -> out=12))))																--True
		
		
			--Two pushes followed by two pols	
			LTLSPEC NAME Fun_6_3 := G((inp=size & out=1) -> X(inp=ofer0 -> X(!FullQueue & inp=ofer1 -> X(inp=pol -> X(inp=pol -> X(inp=size -> out=1))))))						--True
			LTLSPEC NAME Fun_6_4 := G((inp=size & out=2) -> X(inp=ofer0 -> X(!FullQueue & inp=ofer1 -> X(inp=pol -> X(inp=pol -> X(inp=size -> out=2))))))						--True
			
			LTLSPEC NAME Fun_6_4_1 := G((inp=size & out=5) -> X(inp=ofer0 -> X(!FullQueue & inp=ofer1 -> X(inp=pol -> X(inp=pol -> X(inp=size -> out=5))))))					--True
			LTLSPEC NAME Fun_6_4_2 := G((inp=size & out=12) -> X(inp=ofer0 -> X(!FullQueue & inp=ofer1 -> X(inp=pol -> X(inp=pol -> X(inp=size -> out=12))))))					--True
		
		
			--LTLSPEC NAME SEC_3_9 := G((inp=size & out=0) -> X(inp=ofer0 -> X(!FullQueue & inp=ofer1 -> X(inp=pol -> X(inp=size -> out=2)))))									--False
			--LTLSPEC NAME SEC_3_10 := G((inp=size & out=0) -> X(inp=ofer0 -> X(!FullQueue & inp=ofer1 -> X(inp=pol -> X(inp=size -> out=1)))))									--True
				
	
