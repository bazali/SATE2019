MODULE main
VAR state : {s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,s10,s11,s12,s13,s14,s15,s16,s17,s18,s19,s20,s21,s22,s23,s24,s25,s26,s27,s28,s29,s30,s31};
inp : {add1, add2, add3, add4, add5, remov1, remov2, remov3, remov4, remov5, size};
out : {Tru, empty, Fls, 0, 1, 3, 4, 5, 2, ful, Set};
ASSIGN
init(state) := s0;
next(state) := case
state = s0 & inp = add1: s1;
state = s0 & inp = add2: s2;
state = s0 & inp = add3: s3;
state = s0 & inp = add4: s4;
state = s0 & inp = add5: s5;
state = s0 & inp = remov1: s0;
state = s0 & inp = remov2: s0;
state = s0 & inp = remov3: s0;
state = s0 & inp = remov4: s0;
state = s0 & inp = remov5: s0;
state = s0 & inp = size: s0;
state = s1 & inp = add1: s1;
state = s1 & inp = add2: s6;
state = s1 & inp = add3: s7;
state = s1 & inp = add4: s8;
state = s1 & inp = add5: s9;
state = s1 & inp = remov1: s0;
state = s1 & inp = remov2: s1;
state = s1 & inp = remov3: s1;
state = s1 & inp = remov4: s1;
state = s1 & inp = remov5: s1;
state = s1 & inp = size: s1;
state = s2 & inp = add1: s6;
state = s2 & inp = add2: s2;
state = s2 & inp = add3: s10;
state = s2 & inp = add4: s11;
state = s2 & inp = add5: s12;
state = s2 & inp = remov1: s2;
state = s2 & inp = remov2: s0;
state = s2 & inp = remov3: s2;
state = s2 & inp = remov4: s2;
state = s2 & inp = remov5: s2;
state = s2 & inp = size: s2;
state = s3 & inp = add1: s7;
state = s3 & inp = add2: s10;
state = s3 & inp = add3: s3;
state = s3 & inp = add4: s13;
state = s3 & inp = add5: s14;
state = s3 & inp = remov1: s3;
state = s3 & inp = remov2: s3;
state = s3 & inp = remov3: s0;
state = s3 & inp = remov4: s3;
state = s3 & inp = remov5: s3;
state = s3 & inp = size: s3;
state = s4 & inp = add1: s8;
state = s4 & inp = add2: s11;
state = s4 & inp = add3: s13;
state = s4 & inp = add4: s4;
state = s4 & inp = add5: s15;
state = s4 & inp = remov1: s4;
state = s4 & inp = remov2: s4;
state = s4 & inp = remov3: s4;
state = s4 & inp = remov4: s0;
state = s4 & inp = remov5: s4;
state = s4 & inp = size: s4;
state = s5 & inp = add1: s9;
state = s5 & inp = add2: s12;
state = s5 & inp = add3: s14;
state = s5 & inp = add4: s15;
state = s5 & inp = add5: s5;
state = s5 & inp = remov1: s5;
state = s5 & inp = remov2: s5;
state = s5 & inp = remov3: s5;
state = s5 & inp = remov4: s5;
state = s5 & inp = remov5: s0;
state = s5 & inp = size: s5;
state = s6 & inp = add1: s6;
state = s6 & inp = add2: s6;
state = s6 & inp = add3: s16;
state = s6 & inp = add4: s17;
state = s6 & inp = add5: s18;
state = s6 & inp = remov1: s2;
state = s6 & inp = remov2: s1;
state = s6 & inp = remov3: s6;
state = s6 & inp = remov4: s6;
state = s6 & inp = remov5: s6;
state = s6 & inp = size: s6;
state = s7 & inp = add1: s7;
state = s7 & inp = add2: s16;
state = s7 & inp = add3: s7;
state = s7 & inp = add4: s19;
state = s7 & inp = add5: s20;
state = s7 & inp = remov1: s3;
state = s7 & inp = remov2: s7;
state = s7 & inp = remov3: s1;
state = s7 & inp = remov4: s7;
state = s7 & inp = remov5: s7;
state = s7 & inp = size: s7;
state = s8 & inp = add1: s8;
state = s8 & inp = add2: s17;
state = s8 & inp = add3: s19;
state = s8 & inp = add4: s8;
state = s8 & inp = add5: s21;
state = s8 & inp = remov1: s4;
state = s8 & inp = remov2: s8;
state = s8 & inp = remov3: s8;
state = s8 & inp = remov4: s1;
state = s8 & inp = remov5: s8;
state = s8 & inp = size: s8;
state = s9 & inp = add1: s9;
state = s9 & inp = add2: s18;
state = s9 & inp = add3: s20;
state = s9 & inp = add4: s21;
state = s9 & inp = add5: s9;
state = s9 & inp = remov1: s5;
state = s9 & inp = remov2: s9;
state = s9 & inp = remov3: s9;
state = s9 & inp = remov4: s9;
state = s9 & inp = remov5: s1;
state = s9 & inp = size: s9;
state = s10 & inp = add1: s16;
state = s10 & inp = add2: s10;
state = s10 & inp = add3: s10;
state = s10 & inp = add4: s22;
state = s10 & inp = add5: s23;
state = s10 & inp = remov1: s10;
state = s10 & inp = remov2: s3;
state = s10 & inp = remov3: s2;
state = s10 & inp = remov4: s10;
state = s10 & inp = remov5: s10;
state = s10 & inp = size: s10;
state = s11 & inp = add1: s17;
state = s11 & inp = add2: s11;
state = s11 & inp = add3: s22;
state = s11 & inp = add4: s11;
state = s11 & inp = add5: s24;
state = s11 & inp = remov1: s11;
state = s11 & inp = remov2: s4;
state = s11 & inp = remov3: s11;
state = s11 & inp = remov4: s2;
state = s11 & inp = remov5: s11;
state = s11 & inp = size: s11;
state = s12 & inp = add1: s18;
state = s12 & inp = add2: s12;
state = s12 & inp = add3: s23;
state = s12 & inp = add4: s24;
state = s12 & inp = add5: s12;
state = s12 & inp = remov1: s12;
state = s12 & inp = remov2: s5;
state = s12 & inp = remov3: s12;
state = s12 & inp = remov4: s12;
state = s12 & inp = remov5: s2;
state = s12 & inp = size: s12;
state = s13 & inp = add1: s19;
state = s13 & inp = add2: s22;
state = s13 & inp = add3: s13;
state = s13 & inp = add4: s13;
state = s13 & inp = add5: s25;
state = s13 & inp = remov1: s13;
state = s13 & inp = remov2: s13;
state = s13 & inp = remov3: s4;
state = s13 & inp = remov4: s3;
state = s13 & inp = remov5: s13;
state = s13 & inp = size: s13;
state = s14 & inp = add1: s20;
state = s14 & inp = add2: s23;
state = s14 & inp = add3: s14;
state = s14 & inp = add4: s25;
state = s14 & inp = add5: s14;
state = s14 & inp = remov1: s14;
state = s14 & inp = remov2: s14;
state = s14 & inp = remov3: s5;
state = s14 & inp = remov4: s14;
state = s14 & inp = remov5: s3;
state = s14 & inp = size: s14;
state = s15 & inp = add1: s21;
state = s15 & inp = add2: s24;
state = s15 & inp = add3: s25;
state = s15 & inp = add4: s15;
state = s15 & inp = add5: s15;
state = s15 & inp = remov1: s15;
state = s15 & inp = remov2: s15;
state = s15 & inp = remov3: s15;
state = s15 & inp = remov4: s5;
state = s15 & inp = remov5: s4;
state = s15 & inp = size: s15;
state = s16 & inp = add1: s16;
state = s16 & inp = add2: s16;
state = s16 & inp = add3: s16;
state = s16 & inp = add4: s26;
state = s16 & inp = add5: s27;
state = s16 & inp = remov1: s10;
state = s16 & inp = remov2: s7;
state = s16 & inp = remov3: s6;
state = s16 & inp = remov4: s16;
state = s16 & inp = remov5: s16;
state = s16 & inp = size: s16;
state = s17 & inp = add1: s17;
state = s17 & inp = add2: s17;
state = s17 & inp = add3: s26;
state = s17 & inp = add4: s17;
state = s17 & inp = add5: s28;
state = s17 & inp = remov1: s11;
state = s17 & inp = remov2: s8;
state = s17 & inp = remov3: s17;
state = s17 & inp = remov4: s6;
state = s17 & inp = remov5: s17;
state = s17 & inp = size: s17;
state = s18 & inp = add1: s18;
state = s18 & inp = add2: s18;
state = s18 & inp = add3: s27;
state = s18 & inp = add4: s28;
state = s18 & inp = add5: s18;
state = s18 & inp = remov1: s12;
state = s18 & inp = remov2: s9;
state = s18 & inp = remov3: s18;
state = s18 & inp = remov4: s18;
state = s18 & inp = remov5: s6;
state = s18 & inp = size: s18;
state = s19 & inp = add1: s19;
state = s19 & inp = add2: s26;
state = s19 & inp = add3: s19;
state = s19 & inp = add4: s19;
state = s19 & inp = add5: s29;
state = s19 & inp = remov1: s13;
state = s19 & inp = remov2: s19;
state = s19 & inp = remov3: s8;
state = s19 & inp = remov4: s7;
state = s19 & inp = remov5: s19;
state = s19 & inp = size: s19;
state = s20 & inp = add1: s20;
state = s20 & inp = add2: s27;
state = s20 & inp = add3: s20;
state = s20 & inp = add4: s29;
state = s20 & inp = add5: s20;
state = s20 & inp = remov1: s14;
state = s20 & inp = remov2: s20;
state = s20 & inp = remov3: s9;
state = s20 & inp = remov4: s20;
state = s20 & inp = remov5: s7;
state = s20 & inp = size: s20;
state = s21 & inp = add1: s21;
state = s21 & inp = add2: s28;
state = s21 & inp = add3: s29;
state = s21 & inp = add4: s21;
state = s21 & inp = add5: s21;
state = s21 & inp = remov1: s15;
state = s21 & inp = remov2: s21;
state = s21 & inp = remov3: s21;
state = s21 & inp = remov4: s9;
state = s21 & inp = remov5: s8;
state = s21 & inp = size: s21;
state = s22 & inp = add1: s26;
state = s22 & inp = add2: s22;
state = s22 & inp = add3: s22;
state = s22 & inp = add4: s22;
state = s22 & inp = add5: s30;
state = s22 & inp = remov1: s22;
state = s22 & inp = remov2: s13;
state = s22 & inp = remov3: s11;
state = s22 & inp = remov4: s10;
state = s22 & inp = remov5: s22;
state = s22 & inp = size: s22;
state = s23 & inp = add1: s27;
state = s23 & inp = add2: s23;
state = s23 & inp = add3: s23;
state = s23 & inp = add4: s30;
state = s23 & inp = add5: s23;
state = s23 & inp = remov1: s23;
state = s23 & inp = remov2: s14;
state = s23 & inp = remov3: s12;
state = s23 & inp = remov4: s23;
state = s23 & inp = remov5: s10;
state = s23 & inp = size: s23;
state = s24 & inp = add1: s28;
state = s24 & inp = add2: s24;
state = s24 & inp = add3: s30;
state = s24 & inp = add4: s24;
state = s24 & inp = add5: s24;
state = s24 & inp = remov1: s24;
state = s24 & inp = remov2: s15;
state = s24 & inp = remov3: s24;
state = s24 & inp = remov4: s12;
state = s24 & inp = remov5: s11;
state = s24 & inp = size: s24;
state = s25 & inp = add1: s29;
state = s25 & inp = add2: s30;
state = s25 & inp = add3: s25;
state = s25 & inp = add4: s25;
state = s25 & inp = add5: s25;
state = s25 & inp = remov1: s25;
state = s25 & inp = remov2: s25;
state = s25 & inp = remov3: s15;
state = s25 & inp = remov4: s14;
state = s25 & inp = remov5: s13;
state = s25 & inp = size: s25;
state = s26 & inp = add1: s26;
state = s26 & inp = add2: s26;
state = s26 & inp = add3: s26;
state = s26 & inp = add4: s26;
state = s26 & inp = add5: s31;
state = s26 & inp = remov1: s22;
state = s26 & inp = remov2: s19;
state = s26 & inp = remov3: s17;
state = s26 & inp = remov4: s16;
state = s26 & inp = remov5: s26;
state = s26 & inp = size: s26;
state = s27 & inp = add1: s27;
state = s27 & inp = add2: s27;
state = s27 & inp = add3: s27;
state = s27 & inp = add4: s31;
state = s27 & inp = add5: s27;
state = s27 & inp = remov1: s23;
state = s27 & inp = remov2: s20;
state = s27 & inp = remov3: s18;
state = s27 & inp = remov4: s27;
state = s27 & inp = remov5: s16;
state = s27 & inp = size: s27;
state = s28 & inp = add1: s28;
state = s28 & inp = add2: s28;
state = s28 & inp = add3: s31;
state = s28 & inp = add4: s28;
state = s28 & inp = add5: s28;
state = s28 & inp = remov1: s24;
state = s28 & inp = remov2: s21;
state = s28 & inp = remov3: s28;
state = s28 & inp = remov4: s18;
state = s28 & inp = remov5: s17;
state = s28 & inp = size: s28;
state = s29 & inp = add1: s29;
state = s29 & inp = add2: s31;
state = s29 & inp = add3: s29;
state = s29 & inp = add4: s29;
state = s29 & inp = add5: s29;
state = s29 & inp = remov1: s25;
state = s29 & inp = remov2: s29;
state = s29 & inp = remov3: s21;
state = s29 & inp = remov4: s20;
state = s29 & inp = remov5: s19;
state = s29 & inp = size: s29;
state = s30 & inp = add1: s31;
state = s30 & inp = add2: s30;
state = s30 & inp = add3: s30;
state = s30 & inp = add4: s30;
state = s30 & inp = add5: s30;
state = s30 & inp = remov1: s30;
state = s30 & inp = remov2: s25;
state = s30 & inp = remov3: s24;
state = s30 & inp = remov4: s23;
state = s30 & inp = remov5: s22;
state = s30 & inp = size: s30;
state = s31 & inp = add1: s31;
state = s31 & inp = add2: s31;
state = s31 & inp = add3: s31;
state = s31 & inp = add4: s31;
state = s31 & inp = add5: s31;
state = s31 & inp = remov1: s30;
state = s31 & inp = remov2: s29;
state = s31 & inp = remov3: s28;
state = s31 & inp = remov4: s27;
state = s31 & inp = remov5: s26;
state = s31 & inp = size: s31;
esac;
out := case
state = s0 & inp = add1: Tru;
state = s0 & inp = add2: Tru;
state = s0 & inp = add3: Tru;
state = s0 & inp = add4: Tru;
state = s0 & inp = add5: Tru;
state = s0 & inp = remov1: empty;
state = s0 & inp = remov2: empty;
state = s0 & inp = remov3: Fls;
state = s0 & inp = remov4: Fls;
state = s0 & inp = remov5: Fls;
state = s0 & inp = size: 0;
state = s1 & inp = add1: Fls;
state = s1 & inp = add2: Tru;
state = s1 & inp = add3: Tru;
state = s1 & inp = add4: Tru;
state = s1 & inp = add5: Tru;
state = s1 & inp = remov1: Tru;
state = s1 & inp = remov2: Fls;
state = s1 & inp = remov3: Fls;
state = s1 & inp = remov4: Fls;
state = s1 & inp = remov5: Fls;
state = s1 & inp = size: 1;
state = s2 & inp = add1: Tru;
state = s2 & inp = add2: Fls;
state = s2 & inp = add3: Tru;
state = s2 & inp = add4: Tru;
state = s2 & inp = add5: Tru;
state = s2 & inp = remov1: Fls;
state = s2 & inp = remov2: Tru;
state = s2 & inp = remov3: Fls;
state = s2 & inp = remov4: Fls;
state = s2 & inp = remov5: Fls;
state = s2 & inp = size: 1;
state = s3 & inp = add1: Tru;
state = s3 & inp = add2: Tru;
state = s3 & inp = add3: Fls;
state = s3 & inp = add4: Tru;
state = s3 & inp = add5: Tru;
state = s3 & inp = remov1: Fls;
state = s3 & inp = remov2: Fls;
state = s3 & inp = remov3: 3;
state = s3 & inp = remov4: Fls;
state = s3 & inp = remov5: Fls;
state = s3 & inp = size: 1;
state = s4 & inp = add1: Tru;
state = s4 & inp = add2: Tru;
state = s4 & inp = add3: Tru;
state = s4 & inp = add4: Fls;
state = s4 & inp = add5: Tru;
state = s4 & inp = remov1: Fls;
state = s4 & inp = remov2: Fls;
state = s4 & inp = remov3: Fls;
state = s4 & inp = remov4: 4;
state = s4 & inp = remov5: Fls;
state = s4 & inp = size: 1;
state = s5 & inp = add1: Tru;
state = s5 & inp = add2: Tru;
state = s5 & inp = add3: Tru;
state = s5 & inp = add4: Tru;
state = s5 & inp = add5: Fls;
state = s5 & inp = remov1: Fls;
state = s5 & inp = remov2: Fls;
state = s5 & inp = remov3: Fls;
state = s5 & inp = remov4: Fls;
state = s5 & inp = remov5: 5;
state = s5 & inp = size: 1;
state = s6 & inp = add1: Fls;
state = s6 & inp = add2: Fls;
state = s6 & inp = add3: Tru;
state = s6 & inp = add4: Tru;
state = s6 & inp = add5: Tru;
state = s6 & inp = remov1: 1;
state = s6 & inp = remov2: 2;
state = s6 & inp = remov3: Fls;
state = s6 & inp = remov4: Fls;
state = s6 & inp = remov5: Fls;
state = s6 & inp = size: 2;
state = s7 & inp = add1: Fls;
state = s7 & inp = add2: Tru;
state = s7 & inp = add3: Fls;
state = s7 & inp = add4: Tru;
state = s7 & inp = add5: Tru;
state = s7 & inp = remov1: 1;
state = s7 & inp = remov2: Fls;
state = s7 & inp = remov3: 3;
state = s7 & inp = remov4: Fls;
state = s7 & inp = remov5: Fls;
state = s7 & inp = size: 2;
state = s8 & inp = add1: Fls;
state = s8 & inp = add2: Tru;
state = s8 & inp = add3: Tru;
state = s8 & inp = add4: Fls;
state = s8 & inp = add5: Tru;
state = s8 & inp = remov1: 1;
state = s8 & inp = remov2: Fls;
state = s8 & inp = remov3: Fls;
state = s8 & inp = remov4: 4;
state = s8 & inp = remov5: Fls;
state = s8 & inp = size: 2;
state = s9 & inp = add1: Fls;
state = s9 & inp = add2: Tru;
state = s9 & inp = add3: Tru;
state = s9 & inp = add4: Tru;
state = s9 & inp = add5: Fls;
state = s9 & inp = remov1: 1;
state = s9 & inp = remov2: Fls;
state = s9 & inp = remov3: Fls;
state = s9 & inp = remov4: Fls;
state = s9 & inp = remov5: 5;
state = s9 & inp = size: 2;
state = s10 & inp = add1: Tru;
state = s10 & inp = add2: Fls;
state = s10 & inp = add3: Fls;
state = s10 & inp = add4: Tru;
state = s10 & inp = add5: Tru;
state = s10 & inp = remov1: Fls;
state = s10 & inp = remov2: 2;
state = s10 & inp = remov3: 3;
state = s10 & inp = remov4: Fls;
state = s10 & inp = remov5: Fls;
state = s10 & inp = size: 2;
state = s11 & inp = add1: Tru;
state = s11 & inp = add2: Fls;
state = s11 & inp = add3: Tru;
state = s11 & inp = add4: Fls;
state = s11 & inp = add5: Tru;
state = s11 & inp = remov1: Fls;
state = s11 & inp = remov2: 2;
state = s11 & inp = remov3: Fls;
state = s11 & inp = remov4: 4;
state = s11 & inp = remov5: Fls;
state = s11 & inp = size: 2;
state = s12 & inp = add1: Tru;
state = s12 & inp = add2: Fls;
state = s12 & inp = add3: Tru;
state = s12 & inp = add4: Tru;
state = s12 & inp = add5: Fls;
state = s12 & inp = remov1: Fls;
state = s12 & inp = remov2: 2;
state = s12 & inp = remov3: Fls;
state = s12 & inp = remov4: Fls;
state = s12 & inp = remov5: 5;
state = s12 & inp = size: 2;
state = s13 & inp = add1: Tru;
state = s13 & inp = add2: Tru;
state = s13 & inp = add3: Fls;
state = s13 & inp = add4: Fls;
state = s13 & inp = add5: Tru;
state = s13 & inp = remov1: Fls;
state = s13 & inp = remov2: Fls;
state = s13 & inp = remov3: 3;
state = s13 & inp = remov4: 4;
state = s13 & inp = remov5: Fls;
state = s13 & inp = size: 2;
state = s14 & inp = add1: Tru;
state = s14 & inp = add2: Tru;
state = s14 & inp = add3: Fls;
state = s14 & inp = add4: Tru;
state = s14 & inp = add5: Fls;
state = s14 & inp = remov1: Fls;
state = s14 & inp = remov2: Fls;
state = s14 & inp = remov3: 3;
state = s14 & inp = remov4: Fls;
state = s14 & inp = remov5: 5;
state = s14 & inp = size: 2;
state = s15 & inp = add1: Tru;
state = s15 & inp = add2: Tru;
state = s15 & inp = add3: Tru;
state = s15 & inp = add4: Fls;
state = s15 & inp = add5: Fls;
state = s15 & inp = remov1: Fls;
state = s15 & inp = remov2: Fls;
state = s15 & inp = remov3: Fls;
state = s15 & inp = remov4: 4;
state = s15 & inp = remov5: 5;
state = s15 & inp = size: 2;
state = s16 & inp = add1: Fls;
state = s16 & inp = add2: Fls;
state = s16 & inp = add3: Fls;
state = s16 & inp = add4: Tru;
state = s16 & inp = add5: Tru;
state = s16 & inp = remov1: 1;
state = s16 & inp = remov2: 2;
state = s16 & inp = remov3: 3;
state = s16 & inp = remov4: Fls;
state = s16 & inp = remov5: Fls;
state = s16 & inp = size: 3;
state = s17 & inp = add1: Fls;
state = s17 & inp = add2: Fls;
state = s17 & inp = add3: Tru;
state = s17 & inp = add4: Fls;
state = s17 & inp = add5: Tru;
state = s17 & inp = remov1: 1;
state = s17 & inp = remov2: 2;
state = s17 & inp = remov3: Fls;
state = s17 & inp = remov4: 4;
state = s17 & inp = remov5: Fls;
state = s17 & inp = size: 3;
state = s18 & inp = add1: Fls;
state = s18 & inp = add2: Fls;
state = s18 & inp = add3: Tru;
state = s18 & inp = add4: Tru;
state = s18 & inp = add5: Fls;
state = s18 & inp = remov1: 1;
state = s18 & inp = remov2: 2;
state = s18 & inp = remov3: Fls;
state = s18 & inp = remov4: Fls;
state = s18 & inp = remov5: 5;
state = s18 & inp = size: 3;
state = s19 & inp = add1: Fls;
state = s19 & inp = add2: Tru;
state = s19 & inp = add3: Fls;
state = s19 & inp = add4: Fls;
state = s19 & inp = add5: Tru;
state = s19 & inp = remov1: 1;
state = s19 & inp = remov2: Fls;
state = s19 & inp = remov3: 3;
state = s19 & inp = remov4: 4;
state = s19 & inp = remov5: Fls;
state = s19 & inp = size: 3;
state = s20 & inp = add1: Fls;
state = s20 & inp = add2: Tru;
state = s20 & inp = add3: Fls;
state = s20 & inp = add4: Tru;
state = s20 & inp = add5: Fls;
state = s20 & inp = remov1: 1;
state = s20 & inp = remov2: Fls;
state = s20 & inp = remov3: 3;
state = s20 & inp = remov4: Fls;
state = s20 & inp = remov5: 5;
state = s20 & inp = size: 3;
state = s21 & inp = add1: Fls;
state = s21 & inp = add2: Tru;
state = s21 & inp = add3: Tru;
state = s21 & inp = add4: Fls;
state = s21 & inp = add5: Fls;
state = s21 & inp = remov1: 1;
state = s21 & inp = remov2: Fls;
state = s21 & inp = remov3: Fls;
state = s21 & inp = remov4: 4;
state = s21 & inp = remov5: 5;
state = s21 & inp = size: 3;
state = s22 & inp = add1: Tru;
state = s22 & inp = add2: Fls;
state = s22 & inp = add3: Fls;
state = s22 & inp = add4: Fls;
state = s22 & inp = add5: Tru;
state = s22 & inp = remov1: Fls;
state = s22 & inp = remov2: 2;
state = s22 & inp = remov3: 3;
state = s22 & inp = remov4: 4;
state = s22 & inp = remov5: Fls;
state = s22 & inp = size: 3;
state = s23 & inp = add1: Tru;
state = s23 & inp = add2: Fls;
state = s23 & inp = add3: Fls;
state = s23 & inp = add4: Tru;
state = s23 & inp = add5: Fls;
state = s23 & inp = remov1: Fls;
state = s23 & inp = remov2: 2;
state = s23 & inp = remov3: 3;
state = s23 & inp = remov4: Fls;
state = s23 & inp = remov5: 5;
state = s23 & inp = size: 3;
state = s24 & inp = add1: Tru;
state = s24 & inp = add2: Fls;
state = s24 & inp = add3: Tru;
state = s24 & inp = add4: Fls;
state = s24 & inp = add5: Fls;
state = s24 & inp = remov1: Fls;
state = s24 & inp = remov2: 2;
state = s24 & inp = remov3: Fls;
state = s24 & inp = remov4: 4;
state = s24 & inp = remov5: 5;
state = s24 & inp = size: 3;
state = s25 & inp = add1: Tru;
state = s25 & inp = add2: Tru;
state = s25 & inp = add3: Fls;
state = s25 & inp = add4: Fls;
state = s25 & inp = add5: Fls;
state = s25 & inp = remov1: Fls;
state = s25 & inp = remov2: Fls;
state = s25 & inp = remov3: 3;
state = s25 & inp = remov4: 4;
state = s25 & inp = remov5: 5;
state = s25 & inp = size: 3;
state = s26 & inp = add1: Fls;
state = s26 & inp = add2: Fls;
state = s26 & inp = add3: Fls;
state = s26 & inp = add4: Fls;
state = s26 & inp = add5: Tru;
state = s26 & inp = remov1: 1;
state = s26 & inp = remov2: 2;
state = s26 & inp = remov3: 3;
state = s26 & inp = remov4: 4;
state = s26 & inp = remov5: Fls;
state = s26 & inp = size: 4;
state = s27 & inp = add1: Fls;
state = s27 & inp = add2: Fls;
state = s27 & inp = add3: Fls;
state = s27 & inp = add4: Tru;
state = s27 & inp = add5: Fls;
state = s27 & inp = remov1: 1;
state = s27 & inp = remov2: 2;
state = s27 & inp = remov3: 3;
state = s27 & inp = remov4: Fls;
state = s27 & inp = remov5: 5;
state = s27 & inp = size: 4;
state = s28 & inp = add1: Fls;
state = s28 & inp = add2: Fls;
state = s28 & inp = add3: Tru;
state = s28 & inp = add4: Fls;
state = s28 & inp = add5: Fls;
state = s28 & inp = remov1: 1;
state = s28 & inp = remov2: 2;
state = s28 & inp = remov3: Fls;
state = s28 & inp = remov4: 4;
state = s28 & inp = remov5: 5;
state = s28 & inp = size: 4;
state = s29 & inp = add1: Fls;
state = s29 & inp = add2: Tru;
state = s29 & inp = add3: Fls;
state = s29 & inp = add4: Fls;
state = s29 & inp = add5: Fls;
state = s29 & inp = remov1: 1;
state = s29 & inp = remov2: Fls;
state = s29 & inp = remov3: 3;
state = s29 & inp = remov4: 4;
state = s29 & inp = remov5: 5;
state = s29 & inp = size: 4;
state = s30 & inp = add1: Tru;
state = s30 & inp = add2: Fls;
state = s30 & inp = add3: Fls;
state = s30 & inp = add4: Fls;
state = s30 & inp = add5: Fls;
state = s30 & inp = remov1: Fls;
state = s30 & inp = remov2: 2;
state = s30 & inp = remov3: 3;
state = s30 & inp = remov4: 4;
state = s30 & inp = remov5: 5;
state = s30 & inp = size: 4;
state = s31 & inp = add1: ful;
state = s31 & inp = add2: ful;
state = s31 & inp = add3: ful;
state = s31 & inp = add4: ful;
state = s31 & inp = add5: ful;
state = s31 & inp = remov1: 1;
state = s31 & inp = remov2: 2;
state = s31 & inp = remov3: 3;
state = s31 & inp = remov4: 4;
state = s31 & inp = remov5: 5;
state = s31 & inp = size: 5;
esac;
--LTLSPEC Properties

--Liveness Properties.... "Something good will happen"  OR  "Some particular/or good situation eventually occur" Or "Desired behaviour is actually happening".
	--Example-1: If "Input" then, eventually "Output".			G (Input -> F Output)
	--Example-2: It "Started" hold then, eventually "Ready" also hold. 				G(Started -> F Ready)
	--Example-3: If "write" is asserted forever and "read" is never asserted, then the FIFO eventually becomes Full. It think it is written as: G((write & ! read) -> F Full)
	--Example-4: Every request will eventually lead to a response.  	G(request -> F response)	
	--Example-5: If process-1 wants to enter its critical state, it eventually does".  	AG(process-1.state=entering  ->  AF process-1.state=critical)
	--Example-6: For any state, if a "request" (of some source) occurs, then it will eventually be "acknowledged".   G(requested -> F acknowledged)
	
	--Example-7: F(x >5)    or   F (terminate)    or  F(rich)



-- Set size is determined by "add operations" (e.g., for add1 and add2, set size will be 2).

DEFINE Set-Fixed-Size:= 5;
DEFINE EmptySet:= (inp=size & out=0) | (state=s0 & inp=remov1 & out=empty)|(state=s0 & inp=remov2 & out=empty) | (state=s0 & inp=add1 & out=Tru)| (state=s0 & inp=add2 & out=Tru) ; 
DEFINE FullSet:= (inp=add1 & out=ful) | (inp=add2 & out=ful) | (inp=size & out=Set-Fixed-Size);
DEFINE Set-Overflow:= Set-Fixed-Size+1;
DEFINE Set-Underflow:= -1;


	

--P8: If "Add" operation is done forever on a non-filled Set and "Remove" operation never done then the Set eventually becomes "Full".
		
				--LTLSPEC NAME Liv_1_1 := G((!FullSet & ((inp=add1|inp=add2&inp!=remov1) U FullSet)) -> X(inp=size -> out=3))												--True
				LTLSPEC NAME Liv_1_2 := G((!FullSet & ((inp=add1|inp=add2) U FullSet)) -> X(inp=size -> out=Set-Fixed-Size))												--True
				LTLSPEC NAME Liv_1_3 := G((!FullSet & ((inp=add1|inp=add2) U FullSet)) -> F(inp=size -> out=Set-Fixed-Size))												--True
				LTLSPEC NAME Liv_1_4 := G((!FullSet & ((inp=add1|inp=add2) U FullSet)) -> X(inp=size -> out=Set-Fixed-Size))												--True
		
				
				--CTLSPEC NAME Liv_1_5 := AG((!FullSet & (inp=add1 | inp=add2) & inp!=remov1) -> AF (out=0 | out=1 | out=ful))												--True
				--CTLSPEC NAME Liv_1_6 := AG(((inp=add1 | inp=add2) & inp!=remov1) -> AF (out=0 | out=1| out=ful))															--True
			

			
				LTLSPEC NAME Liv_1_7 := G((!EmptySet & (inp=add1 | inp=add2) U FullSet) -> X (inp=size -> out=Set-Fixed-Size))												--True
				LTLSPEC NAME Liv_1_8 := G((!EmptySet & (inp=add1 | inp=add2) U FullSet & inp!=remov1) -> X(inp=size -> out=Set-Fixed-Size))									--True	
				--CTLSPEC NAME Liv_1_9 := AG((!EmptySet & (inp=add1 | inp=add2) & inp!=remov1) -> AF (out=0 | out=1 | out=ful))												--True		  
		
		
	
--P9: If "Remove" operation is done forever on non-empty Set and "Push" operation never done then the Set eventually becomes "Empty".	

				
				--LTLSPEC NAME Liv_2_1 := G(!FullSet -> ((inp=remov1 U EmptySet) ->X(inp=size -> out=0)))																	--False	
				
				LTLSPEC NAME Liv_2_2 := G(!FullSet -> (((inp=remov1|inp=remov2) U EmptySet) ->(inp=size -> out=0)))															--True					
				LTLSPEC NAME Liv_2_3 := G(!FullSet -> (((inp=remov1|inp=remov2) U EmptySet) ->F(inp=size -> out=0)))														--True	
				
				LTLSPEC NAME Liv_2_4 := G(!EmptySet -> ((inp=remov1|inp=remov2) U EmptySet) -> X(inp=size -> out=0))			   											--True
				LTLSPEC NAME Liv_2_5 := G(!EmptySet -> ((inp=remov1|inp=remov2) U EmptySet) -> F(inp=size -> out=0))			   											--True
				
				LTLSPEC NAME Liv_2_6 := G(!EmptySet -> ((inp!=add1|inp!=add2)&inp=remov1 U EmptySet) -> X(inp=size -> out=0))			   									--True
				
						

				
				
--P10(a): If "Add" operation wants to write on the Set then it eventually did this successfully without "Overflow".
				
				CTLSPEC NAME Liv_3_1 := AG((!FullSet & (inp=add1 | inp=add2)) -> AF (out!=Set-Underflow | out!=Set-Overflow))												--True
				CTLSPEC NAME Liv_3_2 := AG((inp=add1 | inp=add2) -> AF(out!=Set-Overflow))																					--True	
		

--P10(b): If "Remove" operation wants to remove an element from the Set, then it eventually did this successfully without "Underflow".

				CTLSPEC NAME Liv_3_3 := AG(inp=remov1 -> AF(out!=Set-Underflow))																							--True
				CTLSPEC NAME Liv_3_4 := AG(!EmptySet & inp=remov1 -> AF(out!=Set-Underflow))																				--True
				
				CTLSPEC NAME Liv_3_5 := AG((inp=add1 | inp=add2 | inp=remov1) -> AF(out!=Set-Overflow | out!=Set-Underflow))												--True
				
				
		
		
